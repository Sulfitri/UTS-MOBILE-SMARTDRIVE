// ===============================
// Program: Sistem Pemesanan Transportasi Terpadu
// Bahasa : Dart
// Konsep : OOP (Abstraction, Inheritance, Encapsulation, Polymorphism)
// ===============================

// ----- Kelas Abstrak Transportasi -----
abstract class Transportasi {
  String id;
  String nama;
  double _tarifDasar; // private
  int kapasitas;

  Transportasi(this.id, this.nama, this._tarifDasar, this.kapasitas);

  // Getter untuk tarif dasar
  double get tarifDasar => _tarifDasar;

  // Method abstrak
  double hitungTarif(int jumlahPenumpang);

  // Method untuk menampilkan info
  void tampilInfo() {
    print('ID: $id');
    print('Nama: $nama');
    print('Tarif Dasar: Rp${_tarifDasar.toStringAsFixed(2)}');
    print('Kapasitas: $kapasitas penumpang');
  }
}

// ----- Kelas Taksi -----
class Taksi extends Transportasi {
  double jarak; // dalam kilometer

  Taksi(String id, String nama, double tarifDasar, int kapasitas, this.jarak)
    : super(id, nama, tarifDasar, kapasitas);

  @override
  double hitungTarif(int jumlahPenumpang) {
    return tarifDasar * jarak;
  }

  @override
  void tampilInfo() {
    super.tampilInfo();
    print('Jenis: Taksi');
    print('Jarak: $jarak km');
    print('---------------------------');
  }
}

// ----- Kelas Bus -----
class Bus extends Transportasi {
  bool adaWifi;

  Bus(String id, String nama, double tarifDasar, int kapasitas, this.adaWifi)
    : super(id, nama, tarifDasar, kapasitas);

  @override
  double hitungTarif(int jumlahPenumpang) {
    return (tarifDasar * jumlahPenumpang) + (adaWifi ? 5000 : 0);
  }

  @override
  void tampilInfo() {
    super.tampilInfo();
    print('Jenis: Bus');
    print('Ada Wifi: ${adaWifi ? "Ya" : "Tidak"}');
    print('---------------------------');
  }
}

// ----- Kelas Pesawat -----
class Pesawat extends Transportasi {
  String kelas; // Ekonomi / Bisnis

  Pesawat(String id, String nama, double tarifDasar, int kapasitas, this.kelas)
    : super(id, nama, tarifDasar, kapasitas);

  @override
  double hitungTarif(int jumlahPenumpang) {
    double faktor = (kelas == "Bisnis") ? 1.5 : 1.0;
    return tarifDasar * jumlahPenumpang * faktor;
  }

  @override
  void tampilInfo() {
    super.tampilInfo();
    print('Jenis: Pesawat');
    print('Kelas: $kelas');
    print('---------------------------');
  }
}

// ----- Kelas Pemesanan -----
class Pemesanan {
  String idPemesanan;
  String namaPelanggan;
  Transportasi transportasi;
  int jumlahPenumpang;
  double totalTarif;

  Pemesanan(
    this.idPemesanan,
    this.namaPelanggan,
    this.transportasi,
    this.jumlahPenumpang,
    this.totalTarif,
  );

  void cetakStruk() {
    print('\n====== STRUK PEMESANAN ======');
    print('ID Pemesanan: $idPemesanan');
    print('Nama Pelanggan: $namaPelanggan');
    print('Transportasi: ${transportasi.nama}');
    print('Jumlah Penumpang: $jumlahPenumpang');
    print('Total Tarif: Rp${totalTarif.toStringAsFixed(2)}');
    print('==============================\n');
  }

  Map<String, dynamic> toMap() {
    return {
      'idPemesanan': idPemesanan,
      'namaPelanggan': namaPelanggan,
      'transportasi': transportasi.nama,
      'jumlahPenumpang': jumlahPenumpang,
      'totalTarif': totalTarif,
    };
  }
}

// ----- Fungsi Global buatPemesanan -----
Pemesanan buatPemesanan(Transportasi t, String nama, int jumlahPenumpang) {
  double total = t.hitungTarif(jumlahPenumpang);
  String idPemesanan = "ORD-${DateTime.now().millisecondsSinceEpoch}";
  return Pemesanan(idPemesanan, nama, t, jumlahPenumpang, total);
}

// ----- Fungsi Global tampilSemuaPemesanan -----
void tampilSemuaPemesanan(List<Pemesanan> daftar) {
  print('\n===== DAFTAR SEMUA PEMESANAN =====');
  for (var p in daftar) {
    p.cetakStruk();
  }
  print('==================================\n');
}

// ----- Fungsi Main -----
void main() {
  // Membuat objek transportasi
  var taksi1 = Taksi("T001", "Taksi BlueBird", 7500, 4, 12.5);
  var bus1 = Bus("B001", "Bus TransJakarta", 5000, 40, true);
  var pesawat1 = Pesawat("P001", "Garuda Indonesia", 1500000, 180, "Bisnis");

  // Menampilkan informasi transportasi
  print("=== INFORMASI TRANSPORTASI ===");
  taksi1.tampilInfo();
  bus1.tampilInfo();
  pesawat1.tampilInfo();

  // Membuat daftar pemesanan
  List<Pemesanan> daftarPemesanan = [];

  // Membuat beberapa pemesanan
  daftarPemesanan.add(buatPemesanan(taksi1, "Budi", 1));
  daftarPemesanan.add(buatPemesanan(bus1, "Ani", 10));
  daftarPemesanan.add(buatPemesanan(pesawat1, "Citra", 2));

  // Menampilkan semua pemesanan
  tampilSemuaPemesanan(daftarPemesanan);
}
